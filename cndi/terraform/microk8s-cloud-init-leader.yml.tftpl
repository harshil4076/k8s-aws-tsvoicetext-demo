#cloud-config

package_update: true
package_upgrade: false
packages:
  - apache2-utils
  - nfs-common
write_files:
  - path: /home/ubuntu/.cndi-runtime/launch-config.yaml
    content: |
      version: 0.1.0
      addons:
        - name: dns
          args:
            - 1.1.1.1
        - name: ingress
        - name: community
        - name: cert-manager
        - name: nfs
      addonRepositories:
        - name: core
          url: 'https://github.com/canonical/microk8s-core-addons'
        - name: community
          url: /snap/microk8s/current/addons/community
          reference: '1.27'
  - path: /home/ubuntu/.cndi-runtime/manifests/root-application.yaml
    content: |-
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: root-application
        namespace: argocd
        finalizers:
          - resources-finalizer.argocd.argoproj.io
      spec:
        project: default
        destination:
          namespace: argocd
          server: 'https://kubernetes.default.svc'
        source:
          path: cndi/cluster_manifests
          repoURL: '${git_repo}'
          targetRevision: HEAD
          directory:
            recurse: true
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            - CreateNamespace=true
  - path: /home/ubuntu/.cndi-runtime/manifests/cluster-repo-secret.yaml
    content: |-
      apiVersion: v1
      kind: Secret
      metadata:
        name: private-repo
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        password: '${git_password}'
        username: '${git_username}'
        url: '${git_repo}'
  - path: /home/ubuntu/.cndi-runtime/sealed_secrets_public_key.crt
    content: '${sealed_secrets_public_key}'
    encoding: b64
    permissions: '0644'
  - path: /home/ubuntu/.cndi-runtime/sealed_secrets_private_key.key
    content: '${sealed_secrets_private_key}'
    encoding: b64
    permissions: '0600'
runcmd:
  - echo "cloud-init.runcmd"
  - echo "------------------"
  - echo "leader bootstrap initializing!"
  - echo "------------------"
  - echo "cndi-user-before begin"
  - echo "cndi-user-before end"
  - echo "------------------"
  - echo "cndi-platform begin"
  - echo "Installing microk8s"
  - >-
    while ! sudo snap install microk8s --classic --channel=1.27/stable; do echo
    'microk8s failed to install, retrying in 180 seconds'; sleep 180; done
  - echo "microk8s installed"
  - echo "Setting microk8s config"
  - >-
    sudo snap set microk8s config="$(cat
    /home/ubuntu/.cndi-runtime/launch-config.yaml)"
  - echo "Adding ubuntu user to microk8s group"
  - sudo usermod -a -G microk8s ubuntu
  - echo "Granting ubuntu user access to ~/.kube"
  - sudo chown -f -R ubuntu ~/.kube
  - echo "Waiting for microk8s to be ready"
  - sudo microk8s status --wait-ready
  - echo "microk8s is ready"
  - 'sudo microk8s add-node --token ${bootstrap_token} -l 4294967295'
  - echo "Installing sealed-secrets-controller"
  - >-
    sudo microk8s kubectl --namespace kube-system apply -f
    https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.21.0/controller.yaml
  - echo "sealed-secrets-controller installed"
  - echo "Setting NFS as default storage class"
  - >-
    while ! sudo microk8s kubectl patch storageclass nfs -p '{ "metadata": {
    "annotations": { "storageclass.kubernetes.io/is-default-class": "true" } }
    }'; do echo 'microk8s failed to install nfs, retrying in 180 seconds'; sleep
    180; done
  - echo "NFS is now the default storage class"
  - echo "Importing Sealed Secrets Keys"
  - >-
    sudo microk8s kubectl --namespace "kube-system" create secret tls
    "cndi-sealed-secrets-key"
    --cert="/home/ubuntu/.cndi-runtime/sealed_secrets_public_key.crt"
    --key="/home/ubuntu/.cndi-runtime/sealed_secrets_private_key.key"
  - >-
    sudo microk8s kubectl --namespace "kube-system" label secret
    "cndi-sealed-secrets-key"
    sealedsecrets.bitnami.com/sealed-secrets-key=active
  - echo "Sealed Secrets Keys imported"
  - echo "Restarting sealed-secrets-controller"
  - >-
    sudo microk8s kubectl --namespace kube-system delete pod -l
    name=sealed-secrets-controller
  - echo "Removing Sealed Secrets Keys from disk"
  - sudo rm /home/ubuntu/.cndi-runtime/sealed_secrets_private_key.key
  - sudo rm /home/ubuntu/.cndi-runtime/sealed_secrets_public_key.crt
  - echo "Sealed Secrets Keys removed from disk"
  - echo "Creating argocd namespace"
  - sudo microk8s kubectl create namespace argocd
  - echo "ArgoCD namespace created"
  - echo "Installing ArgoCD"
  - >-
    sudo microk8s kubectl apply -n argocd -f
    https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.22/manifests/install.yaml
  - echo "ArgoCD Installed"
  - echo "Configuring ArgoCD Root App Manifest"
  - >-
    sudo microk8s kubectl apply -n argocd -f
    /home/ubuntu/.cndi-runtime/manifests/root-application.yaml
  - echo "ArgoCD Root App Manifest Configured"
  - echo "Configuring ArgoCD Cluster Repo Secret"
  - >-
    sudo microk8s kubectl apply -n argocd -f
    /home/ubuntu/.cndi-runtime/manifests/cluster-repo-secret.yaml
  - echo "ArgoCD Cluster Repo Secret Configured"
  - echo "Setting ArgoCD admin password"
  - >-
    ARGOCD_ADMIN_PASSWORD_HASHED="$(htpasswd -bnBC 10 ""
    ${argocd_admin_password} | tr -d ':\n')"
  - NOW="$(date +%FT%T%Z)"
  - >-
    sudo microk8s kubectl -n argocd patch secret argocd-secret -p
    "{\"stringData\":
    {\"admin.password\":\"$ARGOCD_ADMIN_PASSWORD_HASHED\",\"admin.passwordMtime\":
    \"$NOW\"}}"
  - echo "ArgoCD admin password set"
  - echo "Cleaning CNDI Runtime Files"
  - sudo rm -rf /home/ubuntu/.cndi-runtime
  - echo "CNDI Runtime Files Cleaned"
  - echo "cndi-platform end"
  - echo "------------------"
  - echo "cndi-user-after begin"
  - echo "cndi-user-after end"
  - echo "------------------"
  - echo "leader bootstrap complete!"
